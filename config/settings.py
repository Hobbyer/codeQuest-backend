"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env에서 설정해놓은 시크릿키 import os를 통해 받아옴
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#외부의 어떤 호스트를 허용할지
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '54.242.246.228',
    'codequest.co.kr',
    config('AWS_HOST', default=''),

]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_spectacular',               #현재 만들어진 api를 시각적으로 볼 수 있게 하는 패키지

    'rest_framework',   #DRF(Django REST Framework)JSON 형식으로 API 만들어주는 도구
    'corsheaders',      #CORS 다른 도메인에서 우리 API 호출 가능하게 해주는 도구
    'api',              #실제 API 기능을 만들 작업 공간 폴더임
]

# 자바로 따지면 서블릿 + 인터셉터(request -> MIDDLEWARE -> View(자바의 Controller같은 느낌임))
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',            # 장고자체의 시큐리티(자바 시큐리티처럼 중간검문소)
    'corsheaders.middleware.CorsMiddleware',                    # 요청 들어올 때 CORS 체크하는 검문소
    'django.contrib.sessions.middleware.SessionMiddleware',     # 장고 자체의 세션 검문소
    'django.middleware.common.CommonMiddleware',                # 공통 미들웨어
    'django.middleware.csrf.CsrfViewMiddleware',                # CSRF 공격 방어 (POST 요청 토큰 검증)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 사용자 인증 정보 추가 (request.user)
    'django.contrib.messages.middleware.MessageMiddleware',     # 일회성 메시지 처리 (알림)
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 클릭재킹 방어 (iframe 차단)
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# 데이터베이스 연결(마리아디비)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',                         # 마리아 디비 사용 .env에 상세히 적어놓음
        'NAME': config('DB_NAME'),                                    # 데이터베이스 이름
        'USER': config('DB_USER'),                                    # 데이터베이스 사용자명
        'PASSWORD': config('DB_PASSWORD'),                            # 데이터베이스 암호
        'HOST': config('DB_HOST'),                                    # ngrok 원격 주소를 사용할 예정임
        'PORT': config('DB_PORT'),
        'OPTIONS': {
            'charset': 'utf8mb4',                                     # utf8mb4는 utf8보다 더 강력 이모지도 적용가능
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

CORS_ALLOW_ALL_ORIGINS = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}